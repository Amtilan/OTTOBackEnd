from dataclasses import dataclass, field
import os
import typing_extensions as typing
import google.generativeai as genai
import json
from typing import List, Optional
from core.apps.pred_results.service import BasePredResults, ORMPredResults
from core.core.settings.main import env


@dataclass
class ProductRecommendation(typing.TypedDict):
    title: str


@dataclass
class RecommendationGenerator:
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    catalog_file: str = field(default=os.path.join(os.path.dirname(__file__), 'combined.json'), init=False)
    api_key: str = env('GOOGLE_API_KEY')
    model_name: str = env('MODEL_NAME')
    face_path: Optional[str] = None
    pred_results: BasePredResults = field(default_factory=ORMPredResults)

    # –ü–æ–ª—è, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ
    product_catalog: List[dict] = field(init=False, default_factory=list)
    recommendations: Optional[List[dict]] = field(init=False, default=None)
    analysis_results: dict = field(init=False, default_factory=dict)
    model: genai.GenerativeModel = field(init=False)

    def __post_init__(self):
        self._validate_required_fields()
        self._configure_gemini()
        self._load_data()
        self.analysis_results = self._get_analysis_results()
        self.recommendations = self._generate_recommendations()

    def _validate_required_fields(self):
        if not self.face_path:
            raise ValueError("face_path is required")
        if not self.api_key:
            raise EnvironmentError("GOOGLE_API_KEY is not set in environment variables")

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    def _configure_gemini(self) -> None:
        genai.configure(api_key=self.api_key)
        self.model = genai.GenerativeModel(self.model_name)

    @staticmethod
    def _load_json(file_path: str) -> list:
        with open(file_path, "r", encoding="utf-8") as f:
            return json.load(f)  # –û–∂–∏–¥–∞–µ—Ç—Å—è, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç —Å–ø–∏—Å–∫–æ–º —Å–ª–æ–≤–∞—Ä–µ–π
    
    def _load_data(self) -> None:
        self.product_catalog = self._load_json(self.catalog_file)
        
    def _search_product_by_title(self, title: str) -> Optional[dict]:
        for product in self.product_catalog:
            print(type(product))
            if product.get("title") == title:
                return product
        return None

    def _get_analysis_results(self) -> dict:
        return self.pred_results.get_better_pred_results(image_file_path=self.face_path) or {}


    def _generate_recommendations(self) -> List[dict]:
        analysis_report = self._generate_analysis_report()  # Generate the report

        prompt = f"""
        –°–ì–ï–ù–ï–†–ò–†–£–ô –°–ü–ò–°–û–ö –ò–ó 20 –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–• –ü–†–û–î–£–ö–¢–û–í

        –û—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º –æ—Ç—á–µ—Ç–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∫–æ–∂–∏ –∏ –∫–∞—Ç–∞–ª–æ–≥–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤, —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Å–ø–∏—Å–æ–∫ –∏–∑ —Ä–æ–≤–Ω–æ 20 —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ —É—Ö–æ–¥—É –∑–∞ –∫–æ–∂–µ–π.

        –û—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∫–æ–∂–∏:
        {analysis_report}

        –ö–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:
        {json.dumps(self.product_catalog, ensure_ascii=False, indent=4)}

        –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–∂–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∞–∫–Ω–µ, —Ç–µ–º–Ω—ã–µ –∫—Ä—É–≥–∏, –º–æ—Ä—â–∏–Ω—ã) –∏ –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–π —Ä–æ–≤–Ω–æ 20 –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ—à–∞—é—Ç —ç—Ç–∏ –ø—Ä–æ–±–ª–µ–º—ã, —É—á–∏—Ç—ã–≤–∞—è —Ç–∏–ø –∫–æ–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –æ—Ç–¥–∞–≤–∞–π –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞–º, –ø–æ–¥—Ö–æ–¥—è—â–∏–º –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∫–æ–∂–∏. –£–±–µ–¥–∏—Å—å, —á—Ç–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã –∏ –≤–∫–ª—é—á–∞—é—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—á–∏—â–∞—é—â–∏–µ —Å—Ä–µ–¥—Å—Ç–≤–∞, —É–≤–ª–∞–∂–Ω—è—é—â–∏–µ –∫—Ä–µ–º—ã, —Å—ã–≤–æ—Ä–æ—Ç–∫–∏). –ö–∞–∂–¥–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–∫–ª—é—á–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ, —Ü–µ–Ω—É –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.
        """
        result = self.model.generate_content(
            prompt,
            generation_config=genai.GenerationConfig(
                response_mime_type="application/json",
                response_schema={
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "title": {"type": "string"},
                            "price": {"type": "number"},
                            "picture": {"type": "string"}
                        },
                        "required": ["title", "price", "picture"]
                    }
                },
            ),
        )

        recommendations = json.loads(result.text)
        full_recommendations = [
            self._search_product_by_title(rec["title"]) for rec in recommendations
            if self._search_product_by_title(rec["title"]) is not None
        ]

        return full_recommendations


    def _generate_analysis_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∫–æ–∂–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞."""

        results = self.analysis_results
        if not results or 'skin_status' not in results:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–∂–∏."

        skin_status = results['skin_status']

        report = "üìå –û—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∫–æ–∂–∏**\n\n"

        # 1. –ê–∫–Ω–µ –∏ –∑–æ–Ω—ã –≤–æ—Å–ø–∞–ª–µ–Ω–∏—è/–ø–∏–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
        report += "1Ô∏è‚É£ **–ê–∫–Ω–µ –∏ –∑–æ–Ω—ã –≤–æ—Å–ø–∞–ª–µ–Ω–∏—è/–ø–∏–≥–º–µ–Ω—Ç–∞—Ü–∏–∏**\n\n"
        report += "**–ü—Ä–æ–±–ª–µ–º—ã:**\n\n"
        if skin_status.get('acne'):
            acne_confidence = skin_status['acne']['confidence']
            report += f"- –ê–∫–Ω–µ (Acne): {'–í—ã—Ä–∞–∂–µ–Ω–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞' if acne_confidence > 0.7 else '–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç' if acne_confidence > 0.3 else '–ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞'}. (–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {acne_confidence:.6}).\n"
        if skin_status.get('skin_spot'):
            spot_confidence = skin_status['skin_spot']['confidence']
            report += f"- –ü—è—Ç–Ω–∞ –Ω–∞ –∫–æ–∂–µ (Skin Spot): {'–ó–∞–º–µ—Ç–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞' if spot_confidence > 0.7 else '–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç' if spot_confidence > 0.3 else '–ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ'}. (–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {spot_confidence:.6}).\n"
        if skin_status.get('mole'):
             mole_confidence = skin_status['mole']['confidence']
             report += f"- –†–æ–¥–∏–Ω–∫–∏/–±–æ—Ä–æ–¥–∞–≤–∫–∏ (Mole): –ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç. (–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {mole_confidence:6}).\n"


        report += "\n**–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã:**\n\n"
        if skin_status.get('blackhead'):
            blackhead_confidence = skin_status['blackhead']['confidence']
            report += f"- –ß–µ—Ä–Ω—ã–µ —Ç–æ—á–∫–∏ (Blackhead): {'–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç' if blackhead_confidence < 0.1 else '–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –Ω–µ–±–æ–ª—å—à–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ' if blackhead_confidence < 0.5 else '–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç'}. (–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {blackhead_confidence:.6}).\n"

        # 2. –¢—ë–º–Ω—ã–µ –∫—Ä—É–≥–∏ –∏ –º–æ—Ä—â–∏–Ω—ã
        report += "\n2Ô∏è‚É£ **–¢—ë–º–Ω—ã–µ –∫—Ä—É–≥–∏ –∏ –º–æ—Ä—â–∏–Ω—ã**\n\n"
        report += "**–ü—Ä–æ–±–ª–µ–º—ã:**\n\n"
        if skin_status.get('nasolabial_fold'):
            nasolabial_confidence = skin_status['nasolabial_fold']['confidence']
            report += f"- –ù–æ—Å–æ–≥—É–±–Ω—ã–µ —Å–∫–ª–∞–¥–∫–∏ (Nasolabial Fold): {'–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç' if nasolabial_confidence > 0.5 else '–°–ª–∞–±–æ –≤—ã—Ä–∞–∂–µ–Ω—ã'}. (–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {nasolabial_confidence:.6}).\n"

        report += "\n**–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã:**\n\n"
        if skin_status.get('dark_circle'):
            dark_circle_confidence = skin_status['dark_circle']['confidence']
            report += f"- –¢–µ–º–Ω—ã–µ –∫—Ä—É–≥–∏ (Dark Circle): {'–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç' if dark_circle_confidence > 0.7 else '–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç'}. (–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {dark_circle_confidence:.6}).\n"
        if skin_status.get('eye_pouch'):
            eye_pouch_confidence = skin_status['eye_pouch']['confidence']
            report += f"- –ú–µ—à–∫–∏ –ø–æ–¥ –≥–ª–∞–∑–∞–º–∏ (Eye Pouch): –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. (–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {eye_pouch_confidence:.6}).\n"
        if skin_status.get('forehead_wrinkle'):
            forehead_wrinkle_confidence = skin_status['forehead_wrinkle']['confidence']
            report += f"- –ú–æ—Ä—â–∏–Ω—ã –Ω–∞ –ª–±—É (Forehead Wrinkle): {'–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç' if forehead_wrinkle_confidence < 0.1 else '–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –Ω–µ–±–æ–ª—å—à–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ'}. (–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {forehead_wrinkle_confidence:.6}).\n"
        if skin_status.get('eye_finelines'):
             eye_finelines_confidence = skin_status['eye_finelines']['confidence']
             report += f"- –ú–µ–ª–∫–∏–µ –º–æ—Ä—â–∏–Ω—ã –≤–æ–∫—Ä—É–≥ –≥–ª–∞–∑ (Eye Finelines): {'–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç' if eye_finelines_confidence < 0.1 else '–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç'}. (–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {eye_finelines_confidence:.6}).\n"
        if skin_status.get('crows_feet'):
             crows_feet_confidence = skin_status['crows_feet']['confidence']
             report += f"- \"–ì—É—Å–∏–Ω—ã–µ –ª–∞–ø–∫–∏\" (Crows Feet): {'–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç' if crows_feet_confidence < 0.1 else '–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç'}. (–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {crows_feet_confidence:.6}).\n"
        if skin_status.get('glabella_wrinkle'):
            glabella_wrinkle_confidence = skin_status['glabella_wrinkle']['confidence']
            report += f"- –ú–µ–∂–±—Ä–æ–≤–Ω—ã–µ –º–æ—Ä—â–∏–Ω—ã (Glabella Wrinkle): {'–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç' if glabella_wrinkle_confidence < 0.1 else '–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç'}. (–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {glabella_wrinkle_confidence:.6}).\n"

        #left_eyelids and right_eyelids
        if skin_status.get('left_eyelids') and skin_status.get('right_eyelids'):
            left_eyelids_confidence = skin_status['left_eyelids']['confidence']
            right_eyelids_confidence = skin_status['right_eyelids']['confidence']
            report += f"- –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–µ–∫ (Left Eyelids and Right Eyelids): –í –Ω–æ—Ä–º–µ. (–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {left_eyelids_confidence:.6} –∏ {right_eyelids_confidence:.6} —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ).\n"

        # 3. –¢–µ–∫—Å—Ç—É—Ä–∞ –∫–æ–∂–∏ –∏ –ø–æ—Ä—ã
        report += "\n3Ô∏è‚É£ **–¢–µ–∫—Å—Ç—É—Ä–∞ –∫–æ–∂–∏ –∏ –ø–æ—Ä—ã**\n\n"
        report += "**–ü—Ä–æ–±–ª–µ–º—ã:**\n\n"
        if skin_status.get('pores_left_cheek'):
            pores_left_cheek_confidence = skin_status['pores_left_cheek']['confidence']
            report += f"- –ü–æ—Ä—ã –Ω–∞ –ª–µ–≤–æ–π —â–µ–∫–µ (Pores Left Cheek): {'–†–∞—Å—à–∏—Ä–µ–Ω—ã' if pores_left_cheek_confidence > 0.7 else '–£–º–µ—Ä–µ–Ω–Ω–æ —Ä–∞—Å—à–∏—Ä–µ–Ω—ã' if pores_left_cheek_confidence > 0.3 else '–í –Ω–æ—Ä–º–µ'}. (–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {pores_left_cheek_confidence:.6}).\n"
        if skin_status.get('pores_right_cheek'):
            pores_right_cheek_confidence = skin_status['pores_right_cheek']['confidence']
            report += f"- –ü–æ—Ä—ã –Ω–∞ –ø—Ä–∞–≤–æ–π —â–µ–∫–µ (Pores Right Cheek): {'–°–∏–ª—å–Ω–æ —Ä–∞—Å—à–∏—Ä–µ–Ω—ã' if pores_right_cheek_confidence > 0.7 else '–†–∞—Å—à–∏—Ä–µ–Ω—ã' if pores_right_cheek_confidence > 0.3 else '–í –Ω–æ—Ä–º–µ'}. (–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {pores_right_cheek_confidence:.6}).\n"
        if skin_status.get('pores_forehead'):
            pores_forehead_confidence = skin_status['pores_forehead']['confidence']
            report += f"- –ü–æ—Ä—ã –Ω–∞ –ª–±—É (Pores Forehead): {'–í–µ—Ä–æ—è—Ç–Ω–æ, —Ä–∞—Å—à–∏—Ä–µ–Ω—ã' if pores_forehead_confidence > 0.5 else '–í –Ω–æ—Ä–º–µ'}. (–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {pores_forehead_confidence:.6}).\n"

        report += "\n**–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã:**\n\n"
        if skin_status.get('pores_jaw'):
             pores_jaw_confidence = skin_status['pores_jaw']['confidence']
             report += f"- –ü–æ—Ä—ã –Ω–∞ –ø–æ–¥–±–æ—Ä–æ–¥–∫–µ (Pores Jaw): {'–í –Ω–æ—Ä–º–µ' if pores_jaw_confidence > 0.7 else '–ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—à–∏—Ä–µ–Ω—ã'}. (–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {pores_jaw_confidence:.6}).\n"

        # 4. –¢–∏–ø –∫–æ–∂–∏
        report += "\n4Ô∏è‚É£ **–¢–∏–ø –∫–æ–∂–∏**\n\n"
        if skin_status.get('skin_type'):
            skin_type_confidence = skin_status['skin_type']
            skin_types = {
                0: "–¢–∏–ø 0 (–û—á–µ–Ω—å —Å—É—Ö–∞—è)",
                1: "–¢–∏–ø 1 (–°—É—Ö–∞—è)",
                2: "–¢–∏–ø 2 (–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è/–ù–æ—Ä–º–∞–ª—å–Ω–∞—è)",
                3: "–¢–∏–ø 3 (–ñ–∏—Ä–Ω–∞—è)"
            }
            
            # Find the most likely skin type
            best_type = max(skin_type_confidence, key=skin_type_confidence.get)
            report += f"- –û–±—â–∏–π —Ç–∏–ø –∫–æ–∂–∏: {skin_types.get(best_type, '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–∏–ø')}. (–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {skin_type_confidence[best_type]:.6}).\n\n"

            report += "**–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Ç–∏–ø–∞–º:**\n"
            for type_num, type_desc in skin_types.items():
                confidence = skin_type_confidence.get(type_num, 0)
                report += f"- {type_desc}: {confidence:.6}\n"

        # 5. –û–±—â–∏–π –∞–Ω–∞–ª–∏–∑
        report += "\n5Ô∏è‚É£ **–û–±—â–∏–π –∞–Ω–∞–ª–∏–∑**\n\n"
        report += "**–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã: "
        main_problems = []
        if skin_status.get('acne') and skin_status['acne']['confidence'] > 0.7:
            main_problems.append("–ê–∫–Ω–µ")
        if skin_status.get('skin_spot') and skin_status['skin_spot']['confidence'] > 0.7:
            main_problems.append("–ü–∏–≥–º–µ–Ω—Ç–∞—Ü–∏—è (–ø—è—Ç–Ω–∞ –Ω–∞ –∫–æ–∂–µ)")
        if (skin_status.get('pores_left_cheek') and skin_status['pores_left_cheek']['confidence'] > 0.7) or \
           (skin_status.get('pores_right_cheek') and skin_status['pores_right_cheek']['confidence'] > 0.7):
            main_problems.append("–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–æ—Ä—ã (–æ—Å–æ–±–µ–Ω–Ω–æ –Ω–∞ —â–µ–∫–∞—Ö)")
        if skin_status.get('nasolabial_fold') and skin_status['nasolabial_fold']['confidence'] > 0.5:
            main_problems.append("–ù–æ—Å–æ–≥—É–±–Ω—ã–µ —Å–∫–ª–∞–¥–∫–∏")
        report += ", ".join(main_problems) + ".\n" if main_problems else "–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –Ω–µ –≤—ã—è–≤–ª–µ–Ω—ã.\n"

        report += "–í—Ç–æ—Ä–∏—á–Ω—ã–µ/–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã: "
        secondary_problems = []
        if skin_status.get('pores_forehead') and skin_status['pores_forehead']['confidence'] > 0.5:
            secondary_problems.append("–í–æ–∑–º–æ–∂–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø–æ—Ä –Ω–∞ –ª–±—É")
        report += ", ".join(secondary_problems) + ".\n" if secondary_problems else "–í—Ç–æ—Ä–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –Ω–µ –≤—ã—è–≤–ª–µ–Ω—ã.\n"

        report += "–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã: "
        positive_aspects = []
        if skin_status.get('dark_circle') and skin_status['dark_circle']['confidence'] > 0.7:
            positive_aspects.append("–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ç–µ–º–Ω—ã—Ö –∫—Ä—É–≥–æ–≤")
        if skin_status.get('eye_pouch') and skin_status['eye_pouch']['confidence'] > 0.7:
            positive_aspects.append("–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –º–µ—à–∫–æ–≤ –ø–æ–¥ –≥–ª–∞–∑–∞–º–∏")
        if skin_status.get('blackhead') and skin_status['blackhead']['confidence'] < 0.1:
             positive_aspects.append("–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —á–µ—Ä–Ω—ã—Ö —Ç–æ—á–µ–∫")
        if skin_status.get('pores_jaw') and skin_status['pores_jaw']['confidence'] >0.7:
            positive_aspects.append("–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Ä –Ω–∞ –ø–æ–¥–±–æ—Ä–æ–¥–∫–µ")

        low_wrinkle_types = []
        if skin_status.get('forehead_wrinkle') and skin_status['forehead_wrinkle']['confidence'] < 0.1:
            low_wrinkle_types.append("–º–æ—Ä—â–∏–Ω –Ω–∞ –ª–±—É")
        if skin_status.get('eye_finelines') and skin_status['eye_finelines']['confidence'] < 0.1:
            low_wrinkle_types.append("–º–µ–ª–∫–∏—Ö –º–æ—Ä—â–∏–Ω –≤–æ–∫—Ä—É–≥ –≥–ª–∞–∑")
        if skin_status.get('crows_feet') and skin_status['crows_feet']['confidence'] < 0.1:
            low_wrinkle_types.append("\"–≥—É—Å–∏–Ω—ã—Ö –ª–∞–ø–æ–∫\"")
        if skin_status.get('glabella_wrinkle') and skin_status['glabella_wrinkle']['confidence'] < 0.1:
             low_wrinkle_types.append("–º–µ–∂–±—Ä–æ–≤–Ω—ã—Ö –º–æ—Ä—â–∏–Ω")
        if low_wrinkle_types:
            positive_aspects.append("–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ —Ç–∏–ø–æ–≤ –º–æ—Ä—â–∏–Ω (" + ", ".join(low_wrinkle_types) + ")")
        if skin_status.get('left_eyelids') and skin_status.get('right_eyelids') and skin_status['left_eyelids']['confidence'] > 0.7 and skin_status['right_eyelids']['confidence'] > 0.7:
            positive_aspects.append("–•–æ—Ä–æ—à–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–µ–∫")

        report += ", ".join(positive_aspects) + ".\n" if positive_aspects else "–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã –Ω–µ –≤—ã—è–≤–ª–µ–Ω—ã.\n"



        return report